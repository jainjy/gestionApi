// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model BlogArticle {
  id          String    @id @default(uuid())
  authorId    String
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  coverUrl    String?
  tags        String[]
  category    String
  status      String    @default("draft")
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  views       Int       @default(0)
  likes       Int       @default(0)
  comments    Int       @default(0)
  readTime    String?

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  passwordHash     String?
  provider         Json?
  firstName        String?
  lastName         String?
  phone            String?
  role             String        @default("user")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  vendor           Vendor?
  blogArticles     BlogArticle[]
  status           String        @default("inactive")

  // Nouvelles relations
  properties Property[]
  favorites  Favorite[]
}

model Vendor {
  id           String    @id @default(uuid())
  userId       String    @unique
  companyName  String?
  categories   String[]
  coverageArea String[]
  rating       Decimal?  @db.Decimal(2, 1)
  kycStatus    String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[] // Relation inverse ajoutée
}

model Property {
  id          String   @id @default(uuid())
  title       String
  description String?
  type        String   // "house", "apartment", "villa", "land", "studio"
  status      String   // "draft", "pending", "published", "archived", "sold", "rented"
  price       Float?
  
  // Caractéristiques principales
  surface   Int?    // Surface en m²
  rooms     Int?    // Nombre de pièces
  bedrooms  Int?    // Nombre de chambres
  bathrooms Int?    // Nombre de salles de bain
  
  // Localisation
  address   String?
  city      String
  zipCode   String?
  latitude  Float?
  longitude Float?
  
  // Équipements
  features String[] // ["pool", "garden", "parking", "terrace", "balcony"]
  
  // Images
  images String[] // URLs des images
  
  // Métadonnées
  isFeatured Boolean @default(false)
  isActive   Boolean @default(true)
  views      Int     @default(0)
  
  // Nouvelles colonnes ajoutées
  listingType String @default("sale") // "sale", "rent", "both"
  energyClass String? // "A", "B", "C", "D", "E", "F", "G"
  yearBuilt   Int?
  floor       Int?    // Étage
  totalFloors Int?    // Nombre total d'étages
  hasElevator Boolean @default(false)
  hasParking  Boolean @default(false)
  hasBalcony  Boolean @default(false)
  hasTerrace  Boolean @default(false)
  hasGarden   Boolean @default(false)
  hasPool     Boolean @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  slug            String? @unique
  
  // Relations
  ownerId   String
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites Favorite[]
  
  // Dates
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  expiresAt   DateTime? // Date d'expiration de l'annonce

  @@index([city])
  @@index([type])
  @@index([status])
  @@index([ownerId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([listingType])
  @@index([createdAt])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

model Product {
  id          String   @id @default(uuid())
  vendorId    String
  name        String
  slug        String   @unique
  description String?
  category    String
  subcategory String?
  price       Float
  comparePrice Float?  // Prix de comparaison (ancien prix)
  cost        Float?   // Coût d'achat
  sku         String?  // Référence produit
  barcode     String?  // Code-barres
  trackQuantity Boolean @default(true)
  quantity    Int      @default(0)
  lowStock    Int?     @default(5) // Seuil d'alerte stock faible
  weight      Float?   // Poids en kg
  dimensions  Json?    // {length, width, height}
  
  // Images
  images      String[]
  
  // Métadonnées
  status      String   @default("draft") // draft, active, inactive, archived
  featured    Boolean  @default(false)
  visibility  String   @default("public") // public, hidden, private
  
  // SEO
  seoTitle       String?
  seoDescription String?
  
  // Relations
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Dates
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  @@index([vendorId])
  @@index([category])
  @@index([status])
  @@index([featured])
  @@index([createdAt])
}